{
  "api": {
    "main.go": "package main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/lucapierini/project-go-task_manager/config\"\n\t\"github.com/lucapierini/project-go-task_manager/dto\"\n\t\"github.com/lucapierini/project-go-task_manager/handlers\"\n\t\"github.com/lucapierini/project-go-task_manager/middlewares\"\n\t\"github.com/lucapierini/project-go-task_manager/services\"\n)\n\nvar (\n\tuserHandler *handlers.UserHandler\n\troleHandler *handlers.RoleHandler\n\tprojectHandler *handlers.ProjectHandler\n)\n\nfunc init() {\n\tconfig.LoadEnvVariables()\n\tconfig.ConnectDB()\n\tconfig.SyncDB()\n\n\tuserService := services.NewUserService()\n\troleService := services.NewRoleService()\n\tprojectService := services.NewProjectService()\n\n\tuserHandler = handlers.NewUserHandler(userService)\n\troleHandler = handlers.NewRoleHandler(roleService)\n\tprojectHandler = handlers.NewProjectHandler(projectService)\n\n\tinitializeDefaultData(roleService, userService)\n}\n\nfunc initializeDefaultData(roleService *services.RoleService, userService *services.UserService) {\n\troles := []string{\"Administrador\", \"Usuario\"}\n\tfor _, role := range roles {\n\t\tif _, err := roleService.CreateRole(dto.RoleDto{Name: role}); err != nil {\n\t\t\tlog.Printf(\"Error creating role %s: %v\\n\", role, err)\n\t\t}\n\t}\n\n\tadminUser := dto.UserDto{\n\t\tUsername: \"admin\",\n\t\tPassword: \"admin\",\n\t\tRoleIds:  []uint{1, 2},\n\t\tEmail:    \"admin@admin.com\",\n\t}\n\tif _, err := userService.RegisterUser(adminUser); err != nil {\n\t\tlog.Printf(\"Error creating admin user: %v\\n\", err)\n\t}\n}\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.Use(middlewares.CORSMiddleware())\n\n\tsetupRoutes(router)\n\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\t\n\tlog.Printf(\"Server starting on port %s\", port)\n\tif err := router.Run(\":\" + port); err != nil {\n\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}\n\nfunc setupRoutes(router *gin.Engine) {\n\tapi := router.Group(\"/api\")\n\t{\n\t\t// Public routes\n\t\tauth := api.Group(\"/auth\")\n\t\t{\n\t\t\tauth.POST(\"/register\", userHandler.Register)\n\t\t\tauth.POST(\"/login\", userHandler.Login)\n\t\t\tauth.POST(\"/refresh\", handlers.RefreshTokenHandler)\n\t\t}\n\n\t\t// Protected routes\n\t\tadmin := api.Group(\"/admin\")\n\t\tadmin.Use(middlewares.AuthMiddleware(\"Administrador\"))\n\t\t{\n\t\t\t// Roles management\n\t\t\troles := admin.Group(\"/roles\")\n\t\t\t{\n\t\t\t\troles.POST(\"/\", roleHandler.CreateRole)\n\t\t\t\troles.GET(\"/\", roleHandler.ListRoles)\n\t\t\t\troles.GET(\"/:id\", roleHandler.GetRole)\n\t\t\t\troles.PUT(\"/:id\", roleHandler.UpdateRole)\n\t\t\t\troles.DELETE(\"/:id\", roleHandler.DeleteRole)\n\t\t\t}\n\n\t\t\t// User management (admin only)\n\t\t\tusers := admin.Group(\"/users\")\n\t\t\t{\n\t\t\t\tusers.GET(\"/\", userHandler.ListUsers)\n\t\t\t\tusers.GET(\"/:id\", userHandler.GetUser)\n\t\t\t\tusers.PUT(\"/:id\", userHandler.UpdateUser)\n\t\t\t\tusers.DELETE(\"/:id\", userHandler.DeleteUser)\n\t\t\t\tusers.POST(\"/:id_user/:id_role\", userHandler.AddRoleToUser)\n\t\t\t\tusers.DELETE(\"/:id/:id_role\", userHandler.RemoveRoleFromUser)\n\t\t\t}\n\n\t\t\t// Project management\n\t\t\tprojects := admin.Group(\"/projects\")\n\t\t\t{\n\t\t\t\tprojects.GET(\"/\", projectHandler.ListProjects)\n\t\t\t\tprojects.POST(\"/\", projectHandler.CreateProject)\n\t\t\t\tprojects.GET(\"/:id\", projectHandler.GetProjectById)\n\t\t\t\tprojects.PUT(\"/:id\", projectHandler.UpdateProject)\n\t\t\t\tprojects.DELETE(\"/:id\", projectHandler.DeleteProject)\n\t\t\t\tprojects.GET(\"/user/:id\", projectHandler.ListProjectsByUserId)\t\n\t\t\t\tprojects.POST(\"/:id/user/:userId\", projectHandler.AddUsersToProject)\n\t\t\t\tprojects.DELETE(\"/:id/user/:userId\", projectHandler.RemoveUsersFromProject)\n\t\t\t\tprojects.POST(\"/:id/task\", projectHandler.AddTasksToProject)\n\t\t\t\tprojects.DELETE(\"/:id/task/:taskId\", projectHandler.RemoveTasksFromProject)\n\t\t\t}\n\t\t}\n\n\t\t// // Routes accessible by both Admin and Reader\n\t\t// users := api.Group(\"/users\")\n\t\t// users.Use(middlewares.AuthMiddleware(/*\"Usuario\"*/))\n\t\t// {\n\t\t// \tusers.GET(\"/:id\" ,middlewares.IsOwner(),userHandler.GetUser)\n\t\t// \tusers.PUT(\"/:id\", userHandler.UpdateUser)\n\t\t// \tusers.DELETE(\"/:id\", userHandler.DeleteUser)\n\t\t// }\n\t\tusers := api.Group(\"/users\")\n\t\t{\n\t\t\tusers.GET(\"/:id\",middlewares.AuthMiddleware(\"Usuario\"), userHandler.GetUser)\n\t\t}\n\n\t\tprojects := api.Group(\"/projects\")\n\t\tprojects.Use(middlewares.AuthMiddleware(\"Administrador\", \"Usuario\"))\n\t\t{\n\t\t\tprojects.POST(\"/\", projectHandler.CreateProject)\n\n\t\t}\n\t}\n}",
    "middlewares": {
      "AuthMiddleware.go": "package middlewares\n\nimport (\n\t\"net/http\"\n\t\"strings\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/lucapierini/project-go-task_manager/services\"\n)\n\nfunc AuthMiddleware(requiredRoles ...string) gin.HandlerFunc {\n    return func(c *gin.Context) {\n        authHeader := c.GetHeader(\"Authorization\")\n        if authHeader == \"\" {\n            c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"token not provided\"})\n            return\n        }\n\n        tokenString := strings.TrimPrefix(authHeader, \"Bearer \")\n        claims, err := services.ValidateToken(tokenString)\n        if err != nil {\n            if err == services.ErrExpiredToken {\n                c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"token expired\", \"code\": \"TOKEN_EXPIRED\"})\n                return\n            }\n            c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"invalid token\"})\n            return\n        }\n\n        if claims.TokenType != \"access\" {\n            c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"invalid token type\"})\n            return\n        }\n\n        if len(requiredRoles) > 0 {\n            hasRequiredRole := false\n            for _, requiredRole := range requiredRoles {\n                for _, userRole := range claims.Roles {\n                    if requiredRole == userRole {\n                        hasRequiredRole = true\n                        break\n                    }\n                }\n                if hasRequiredRole {\n                    break\n                }\n            }\n\n            if !hasRequiredRole {\n                c.AbortWithStatusJSON(http.StatusForbidden, gin.H{\"error\": \"insufficient permissions\"})\n                return\n            }\n        }\n        c.Set(\"user\", claims)\n        c.Next()\n    }\n}",
      "CorsMiddleware.go": "package middlewares\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc CORSMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Headers\", \"*\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Methods\", \"POST, OPTIONS, GET, PUT\")\n\n\t\tif c.Request.Method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(204)\n\t\t\treturn\n\t\t}\n\n\t\tc.Next()\n\t}\n}\n",
      "OwnerMiddleware.go": "package middlewares"
    },
    "models": {
      "Claims.go": "package models\n\nimport (\n\t\t\"github.com/golang-jwt/jwt\"\n)\n\n\ntype Claims struct {\n    UserID uint\n    Roles  []string\n    TokenType string\n    jwt.StandardClaims\n}",
      "Project.go": "package models\n\nimport \"gorm.io/gorm\"\n\ntype Project struct {\n\tgorm.Model\n\tName    string  `gorm:\"unique;not null\"`\n\tBudget  uint `gorm:\"not null\"`\n\tOwner   User    `gorm:\"foreignKey:OwnerID\"`\n\tOwnerID uint\n\tUsers   []User `gorm:\"many2many:project_users\"`\n\tTasks   []Task `gorm:\"many2many:project_tasks\"`\n}",
      "Role.go": "package models\n\nimport \"gorm.io/gorm\"\n\ntype Role struct {\n\tgorm.Model\n\tName string `gorm:\"unique;not null\" json:\"name\"`\n\tUsers []User `gorm:\"many2many:user_roles\" json:\"users,omitempty\"`\n}\n\n",
      "Task.go": "package models\n\nimport \"gorm.io/gorm\"\n\ntype Task struct {\n\tgorm.Model\n\tName string `gorm:\"not null\"`\n\tDescription string\n\tOwner   User    `gorm:\"foreignKey:OwnerID\"`\n\tOwnerID uint\n\tProject Project `gorm:\"foreignKey:ProjectID\"`\n\tProjectID uint\n}",
      "TokenPair.go": "package models\n\n\ntype TokenPair struct {\n    AccessToken  string\n    RefreshToken string\n}",
      "User.go": "package models\n\nimport (\n\t\"gorm.io/gorm\"\n)\n\ntype User struct {\n\tgorm.Model\n\tUsername string `gorm:\"unique;not null\"`\n\tPassword string `gorm:\"not null\"`\n\tEmail string `gorm:\"unique;not null\"`\n\tRoles []Role `gorm:\"many2many:user_roles\"`\n}"
    }
  }
}